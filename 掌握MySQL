1. 规范化： 将数据分开放到表中和创建主键的过程。确保每一条信息在数据库中只是出现一次。
2. 第一范式的三个要求（处理多列间的冗余）: 
   （1） 不能有包含相同类型的数据的重复出现；
   （2） 所有的列都是单值的
   （3） 要有一个主键来唯一标识每一行
3. 键的目的是为了能够更快地搜索。
4. foreign key(外键)：如果原有的键不足以唯一标识两个以上的表时，就需要将他们连接到另一表，新键称为外键。
5. 一个唯一键经常在一个表中作为主键，和作为外键用以连接该表和另一表。
6. 第二范式（处理多行间的冗余）： 表必须是第一范式了。通过识别在不同地方有重复的列，将其移出到相应独立表中来达到第二范式。
7. 若珍视自己的人生，那就将其当做一件艺术来创作，艺术原本自由，青春适当的地方可以留白，没人规定一定要满满当当的。为何留白
可以没有理由，或者留白本身就是最好的理由。在最简单的地方，留下最无痕的记忆，这记忆对话的是无限与未知，或许是一次真正的超脱。
8. 当你跑是因为兴趣而跑的时候，那就不叫跑，叫玩。
9. 第三范式：符合第一第二范式，其状态已经非常好，可以不用修改了，但是要非常严谨的话，就要达到第三范式，即要求数据不直接依赖
于主键。但根据相关性，也要将依赖于表中其他值的数据移到其他单独的表中。
10. 如果可以完全确定客户的名称和地址永远是需要的全部，就应该省略这个最后的规范化过程。
11. 第三范式规范化的前提条件是:
   （1）是否会有许多新列需要添加到该表中
   （2）表的字段在任何时候都需要全局更新吗？
12. 第三范式是按照数据的内在关联性， 将数据划分归纳为几个关联性比较强大的表中，各个 表分设主键，各主键键有唯一的关联可以相互
访问。这样方便了对数据的修改和更新，例如： 加入一个城市要重命名，那么一般的要执行全局搜索并替换那个城市的名字。但是第三范式
建立的数据库中，只需要在城市名的那个表中修改名字就可以了。
13. 流量非常大的网站不考虑规范化，因为规范化需在多个表中分散数据，这意味着每次查询都要多次调用MySQL，这减慢了访问速度。
14. 联系： 一对一联系； 一对多联系：一个表中的一行被连接到另一个表的多行时； 多对多联系：一个表中的多个行被连接到另一个表中
的多行，需增添第三只表作为联系表，这只表不包含其他信息，因为他的唯一目的是连接其他表。
15. 数据库和匿名： 使用关系可以积累有关某项目的很多信息。
16. 事务：允许同时由多个用户或程序在数据库中并发访问，MySQL的无缝连接处理确保用户或进程的所有事务都是顺序执行的，不会相互干扰
17. 事务存储引擎（创建一个事务就绪表）：
    CREATE TABLE account(
      number INT, balance FLOAT, PRIMARY KEY(number)
    ) ENGINE InnoDB;  DESCRIBE accounts;
   填充account表：
   INSERT INTO accounts(number, balance) VALUES(12345, 1025.3);
   INSERT INTO accounts(number, balance) VALUES(2335, 235.34);
   SELECT *FROM accounts;
18. 使用BEGIN： 在MySQL中事务总是以一个BEGIN或START TRANSACTION开始 例如：
    BEGIN;
    UPDATE accounts SET balance=balance+25.33 WHERE number=124;
    COMMIT;
    SELECT　*FROM accounts;
19. 使用COMMIT： 当对一个事务中的一系列查询成功完成满意后，可以发出一COMMIT命令把所有的更改提交到数据库中。
20. 如果修改了还没有提交COMMIT则修改时暂时的，提交ROLLBACK则可以撤销修改。
21. 
   
